#!/bin/bash
# SOS Task Management System - Automated Task Switching
# Usage: task <command> [issue-number]

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get current branch
CURRENT_BRANCH=$(git branch --show-current)

# Function to show current task
show_current() {
    echo -e "${BLUE}üìç Current Task${NC}"
    echo "=================="
    
    if [[ $CURRENT_BRANCH == feature/* ]] || [[ $CURRENT_BRANCH == fix/* ]]; then
        ISSUE_NUM=$(echo $CURRENT_BRANCH | grep -o '[0-9]\+' | head -1)
        echo -e "Branch: ${GREEN}$CURRENT_BRANCH${NC}"
        
        if [ -n "$ISSUE_NUM" ]; then
            echo -e "Issue:  ${GREEN}#$ISSUE_NUM${NC}"
            gh issue view $ISSUE_NUM --json title,state,assignees | jq -r '"Title:  \(.title)\nStatus: \(.state)\nAssignee: \(.assignees[0].login // "Unassigned")"'
        fi
        
        # Show uncommitted changes
        CHANGES=$(git status --porcelain | wc -l | tr -d ' ')
        if [ "$CHANGES" -gt 0 ]; then
            echo -e "\n${YELLOW}‚ö†Ô∏è  Uncommitted changes: $CHANGES files${NC}"
            git status --short
        fi
    else
        echo -e "${YELLOW}Not on a task branch (current: $CURRENT_BRANCH)${NC}"
    fi
}

# Function to switch to a task
switch_task() {
    ISSUE_NUM=$1
    
    if [ -z "$ISSUE_NUM" ]; then
        echo -e "${RED}Error: Please provide an issue number${NC}"
        echo "Usage: task switch <issue-number>"
        exit 1
    fi
    
    echo -e "${BLUE}üîÑ Switching to Task #$ISSUE_NUM${NC}"
    echo "=========================="
    
    # Check for uncommitted changes
    if ! git diff-index --quiet HEAD --; then
        echo -e "${YELLOW}üì¶ Stashing current changes...${NC}"
        STASH_MSG="WIP: $CURRENT_BRANCH - $(date '+%Y-%m-%d %H:%M')"
        git stash push -m "$STASH_MSG"
        echo -e "${GREEN}‚úì Changes stashed${NC}"
    fi
    
    # Find branch for this issue
    BRANCH_NAME=$(git branch -a | grep -E "(feature|fix|enhance)/[^/]*${ISSUE_NUM}" | head -1 | sed 's/^[* ]*//' | sed 's/^remotes\/origin\///')
    
    if [ -z "$BRANCH_NAME" ]; then
        echo -e "${YELLOW}No branch found for issue #$ISSUE_NUM${NC}"
        echo -e "${BLUE}Creating new branch...${NC}"
        
        # Get issue details
        ISSUE_JSON=$(gh issue view $ISSUE_NUM --json title,labels)
        ISSUE_TITLE=$(echo $ISSUE_JSON | jq -r '.title' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-40)
        
        # Determine branch type from labels
        if echo $ISSUE_JSON | jq -r '.labels[].name' | grep -q "bug"; then
            BRANCH_TYPE="fix"
        elif echo $ISSUE_JSON | jq -r '.labels[].name' | grep -q "enhancement"; then
            BRANCH_TYPE="feature"
        else
            BRANCH_TYPE="feature"
        fi
        
        BRANCH_NAME="$BRANCH_TYPE/issue-$ISSUE_NUM-$ISSUE_TITLE"
        
        # Create and checkout new branch
        git checkout main
        git pull origin main
        git checkout -b $BRANCH_NAME
        
        echo -e "${GREEN}‚úì Created branch: $BRANCH_NAME${NC}"
        
        # Assign issue to self
        gh issue edit $ISSUE_NUM --add-assignee @me
        echo -e "${GREEN}‚úì Assigned issue to you${NC}"
        
        # Create draft PR
        PR_BODY="## Description
Work in progress for issue #$ISSUE_NUM

## Related Issue
Closes #$ISSUE_NUM

## Checklist
- [ ] Implementation complete
- [ ] Tests added
- [ ] Documentation updated"
        
        gh pr create --draft --title "$BRANCH_TYPE: $ISSUE_TITLE" --body "$PR_BODY"
        echo -e "${GREEN}‚úì Created draft PR${NC}"
    else
        # Checkout existing branch
        git checkout $BRANCH_NAME
        
        # Check for stashed changes for this branch
        STASH_LIST=$(git stash list | grep "$BRANCH_NAME" | head -1)
        if [ -n "$STASH_LIST" ]; then
            STASH_NUM=$(echo $STASH_LIST | cut -d: -f1 | sed 's/stash@{\([0-9]*\)}/\1/')
            echo -e "${BLUE}üîç Found stashed changes for this branch${NC}"
            echo "$STASH_LIST"
            read -p "Apply stashed changes? (y/n) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git stash pop stash@{$STASH_NUM}
                echo -e "${GREEN}‚úì Stashed changes applied${NC}"
            fi
        fi
    fi
    
    # Update branch if behind
    git fetch origin
    BEHIND=$(git rev-list --count HEAD..origin/main)
    if [ "$BEHIND" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Branch is $BEHIND commits behind main${NC}"
        read -p "Update branch? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git rebase origin/main
            echo -e "${GREEN}‚úì Branch updated${NC}"
        fi
    fi
    
    echo -e "\n${GREEN}‚úÖ Switched to task #$ISSUE_NUM${NC}"
    show_current
}

# Function to start a new task
start_task() {
    ISSUE_NUM=$1
    
    if [ -z "$ISSUE_NUM" ]; then
        # Show available issues
        echo -e "${BLUE}üìã Available Issues${NC}"
        echo "==================="
        gh issue list --assignee @me --state open --limit 10
        echo
        read -p "Enter issue number to start: " ISSUE_NUM
    fi
    
    switch_task $ISSUE_NUM
}

# Function to list all active tasks
list_tasks() {
    echo -e "${BLUE}üìä Active Tasks${NC}"
    echo "================"
    
    # Get all feature/fix branches
    for branch in $(git branch | grep -E '(feature|fix|enhance)/' | sed 's/^[* ]*//'); do
        ISSUE_NUM=$(echo $branch | grep -o '[0-9]\+' | head -1)
        MODIFIED=$(git log -1 --pretty=format:"%cr" $branch)
        
        if [ "$branch" = "$CURRENT_BRANCH" ]; then
            echo -e "${GREEN}‚Üí $branch${NC} (current)"
        else
            echo -e "  $branch"
        fi
        
        if [ -n "$ISSUE_NUM" ]; then
            ISSUE_TITLE=$(gh issue view $ISSUE_NUM --json title --jq .title 2>/dev/null || echo "Issue not found")
            echo "  Issue #$ISSUE_NUM: $ISSUE_TITLE"
        fi
        echo "  Last modified: $MODIFIED"
        
        # Check for stashed changes
        if git stash list | grep -q "$branch"; then
            echo -e "  ${YELLOW}üì¶ Has stashed changes${NC}"
        fi
        echo
    done
}

# Function to pause current task
pause_task() {
    echo -e "${BLUE}‚è∏Ô∏è  Pausing Current Task${NC}"
    echo "======================="
    
    if ! git diff-index --quiet HEAD --; then
        COMMIT_MSG=${1:-"WIP: Pausing work"}
        echo -e "${BLUE}üíæ Saving work...${NC}"
        
        git add -A
        git commit -m "$COMMIT_MSG [skip ci]"
        git push
        
        echo -e "${GREEN}‚úì Work saved and pushed${NC}"
    else
        echo -e "${GREEN}‚úì No uncommitted changes${NC}"
    fi
    
    # Go back to main
    git checkout main
    git pull origin main
    
    echo -e "${GREEN}‚úÖ Task paused. On main branch.${NC}"
}

# Function to finish a task
finish_task() {
    echo -e "${BLUE}üèÅ Finishing Current Task${NC}"
    echo "========================="
    
    # Get issue number from branch
    ISSUE_NUM=$(echo $CURRENT_BRANCH | grep -o '[0-9]\+' | head -1)
    
    if [ -z "$ISSUE_NUM" ]; then
        echo -e "${RED}Error: Not on a task branch${NC}"
        exit 1
    fi
    
    # Check for uncommitted changes
    if ! git diff-index --quiet HEAD --; then
        echo -e "${YELLOW}‚ö†Ô∏è  Uncommitted changes found${NC}"
        git status --short
        read -p "Commit changes? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "Commit message: " COMMIT_MSG
            git add -A
            git commit -m "$COMMIT_MSG"
        fi
    fi
    
    # Push changes
    git push
    
    # Update PR to ready
    PR_NUM=$(gh pr list --head $CURRENT_BRANCH --json number --jq '.[0].number')
    if [ -n "$PR_NUM" ]; then
        gh pr ready
        echo -e "${GREEN}‚úì PR marked as ready for review${NC}"
        echo -e "${BLUE}üîó PR: $(gh pr view --json url --jq .url)${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Task ready for review!${NC}"
}

# Main command handler
case "$1" in
    "current"|"")
        show_current
        ;;
    "switch"|"sw")
        switch_task $2
        ;;
    "start"|"new")
        start_task $2
        ;;
    "list"|"ls")
        list_tasks
        ;;
    "pause")
        pause_task "$2"
        ;;
    "finish"|"done")
        finish_task
        ;;
    "help"|"-h"|"--help")
        echo "SOS Task Management System"
        echo "========================="
        echo ""
        echo "Commands:"
        echo "  task [current]         Show current task status"
        echo "  task switch <number>   Switch to a different task"
        echo "  task start [number]    Start working on a new task"
        echo "  task list             List all active tasks"
        echo "  task pause [message]   Save work and return to main"
        echo "  task finish           Mark task ready for review"
        echo ""
        echo "Aliases:"
        echo "  task sw <number>      Same as 'task switch'"
        echo "  task ls               Same as 'task list'"
        echo ""
        echo "Examples:"
        echo "  task                  # Show what you're working on"
        echo "  task switch 9         # Switch to issue #9"
        echo "  task start            # Pick a new issue to work on"
        echo "  task finish           # Complete current task"
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Use 'task help' for usage information"
        exit 1
        ;;
esac